@page
@using System.Globalization;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
<input type="text" id="baseAddress" value="@Configuration["BaseAddress"]"  />

<input type="text" id="email" value="@User.Identity.Name" />

<div class="row" >
    <div class="col-md-12">
        <div class="x_panel" style="min-height:695px">
            <div class="col-md-4">
                <div class="x_title" style="min-height:39.8px;border:none">
                    
                </div>

                <div class="x_content">
                    <div class="fc-toolbar fc-header-toolbar" style="min-height:23.11px">
                    </div>
                    <div class="fc-clear"></div>

                    <div>
                        <div id="nav" style="margin:auto"></div>

                    </div>

                </div>
            </div>

            <div class="col-md-8">
                <div class="x_title">
                    <h2>Lịch sự kiện <small>Chi tiết</small></h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            Phòng:
                            <select id="doctor" name="doctor"></select>

                        </li>
                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content" id="day-container">

                    <div class="fc-toolbar fc-header-toolbar">
                        <div class="fc-left">
                            <div class="fc-button-group">
                                <a href="javascript:dp.startDate = dp.startDate.addDays(-1); dp.update();">
                                    <button type="button" class="fc-prev-button fc-button fc-state-default fc-corner-left">
                                        <span class="fc-icon fc-icon-left-single-arrow"></span>


                                    </button>
                                </a>
                                <a href="javascript:dp.startDate = dp.startDate.addDays(1); dp.update();">
                                    <button type="button" class="fc-next-button fc-button fc-state-default fc-corner-right">
                                        <span class="fc-icon fc-icon-right-single-arrow"></span>
                                    </button>
                                </a>


                            </div>
                            <button type="button" class="fc-today-button fc-button fc-state-default fc-corner-left fc-corner-right">Tuần này</button>
                        </div>
                        <div class="fc-right">
                            <div class="fc-button-group">
                                <button type="button" class="fc-agendaDay-button fc-button fc-state-default" onclick="day()">Ngày</button>
                                <button type="button" class="fc-agendaWeek-button fc-button fc-state-default" onclick="week()">Tuần</button>
                                <button type="button" class="fc-month-button fc-button fc-state-default fc-corner-left" onclick="month()">Tháng</button>
                            </div>
                        </div>
                        <div class="fc-center">
                        </div>
                        <div class="fc-clear"></div>
                    </div>
                    <div id="dp">
                    </div>
                </div>
                <div class="x_content" id="week-container" style="display:none;">
                    <div class="fc-toolbar fc-header-toolbar">
                        <div class="fc-left">
                            <div class="fc-button-group">
                                <a href="javascript:calendar.startDate = calendar.startDate.addDays(-7); calendar.update();">
                                    <button type="button" class="fc-prev-button fc-button fc-state-default fc-corner-left">
                                        <span class="fc-icon fc-icon-left-single-arrow"></span>


                                    </button>
                                </a>
                                <a href="javascript:calendar.startDate = calendar.startDate.addDays(7); calendar.update();">
                                    <button type="button" class="fc-next-button fc-button fc-state-default fc-corner-right">
                                        <span class="fc-icon fc-icon-right-single-arrow"></span>
                                    </button>
                                </a>


                            </div>
                            <button type="button" class="fc-today-button fc-button fc-state-default fc-corner-left fc-corner-right">Tuần này</button>
                        </div>
                        <div class="fc-right">
                            <div class="fc-button-group">
                                <button type="button" class="fc-agendaDay-button fc-button fc-state-default" onclick="day()">Ngày</button>
                                <button type="button" class="fc-agendaWeek-button fc-button fc-state-default" onclick="week()">Tuần</button>
                                <button type="button" class="fc-month-button fc-button fc-state-default fc-corner-left" onclick="month()">Tháng</button>
                            </div>
                        </div>
                        <div class="fc-center">
                        </div>
                        <div class="fc-clear"></div>
                    </div>
                    <div id="calendar"></div>


                </div>
                <div class="x_content" id="month-container" style="display:none;">
                    <div class="fc-toolbar fc-header-toolbar">
                        <div class="fc-left">
                            <span class="toolbar-item"><label for="business-only"><input type="checkbox" id="business-only">  <strong>Giờ làm việc</strong></label></span>

                        </div>
                        <div class="fc-right">
                            <div class="fc-button-group">
                                <button type="button" class="fc-agendaDay-button fc-button fc-state-default" onclick="day()">Ngày</button>
                                <button type="button" class="fc-agendaWeek-button fc-button fc-state-default" onclick="week()">Tuần</button>
                                <button type="button" class="fc-month-button fc-button fc-state-default fc-corner-left" onclick="month()">Tháng</button>
                            </div>
                        </div>
                        <div class="fc-center">
                        </div>
                        <div class="fc-clear"></div>
                    </div>
                    <div id="scheduler"></div>


                </div>

            </div>
        </div>

    </div>
</div>
<div class="row">
<div class="col-md-6 col-xs-12" id="booknow">
        <div class="x_panel">
            <div class="x_title">
                <h2>Đặt lịch phòng họp</h2>
                <ul class="nav navbar-right panel_toolbox">
                    <li>
                        <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                    </li>                
                </ul>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                <form asp-action="Add" asp-controller="Booking" method="post" enctype="multipart/form-data" class="form-horizontal form-label-left" >

                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12">Nội dung</label>
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @if (TempData["Description"] != null)
                            {
                                <input class="form-control" name="Description" id="Description" type="text" onfocus="this.placeholder = ''" onblur="this.placeholder = 'Nội dung'" placeholder="Nội dung" value="@TempData["Description"]">
                            }
                            else
                            {
                                <input class="form-control" name="Description" id="Description" type="text" onfocus="this.placeholder = ''" onblur="this.placeholder = 'Nội dung'" placeholder="Nội dung">

                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12">Ghi chú</label>
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @if (TempData["Note"] != null)
                            {
                                <input type="text" class="form-control" name="Note" id="note" onfocus="this.placeholder = ''" onblur="this.placeholder = 'Ghi chú'" placeholder="Ghi chú" value="@TempData["Note"]" />
                            }
                            else
                            {
                                <input type="text" class="form-control" name="Note" id="note" onfocus="this.placeholder = ''" onblur="this.placeholder = 'Ghi chú'" placeholder="Ghi chú" />

                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12">Thời gian bắt đầu</label>
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @if (TempData["FromDate"] != null)
                            {
                                <div class="input-group date" id="myDatepicker">
                                    <input type="text" class="form-control col-md-10" name="Start" id="Start" value='@TempData["FromDate"]'>
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            }
                            else
                            {
                                <div class="input-group date" id="myDatepicker">
                                    <input type="text" class="form-control col-md-10" name="Start" id="Start">
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12">Thời gian kết thúc</label>
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @if (TempData["ToDate"] != null)
                            {
                                    <div class="input-group date" id="toDate">
                                    <input type="text" class="form-control col-md-10" name="End" id="End" value='@TempData["ToDate"]' />
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </span>
                                    </div>
                            }
                            else
                            {
                                    <div class="input-group date" id="toDate">
                                    <input type="text" class="form-control col-md-10" name="End" id="End" />
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </span>
                                    </div>
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12">Phòng</label>
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            <select class="select2_single form-control" tabindex="-1" id="room" name="Room">
                            </select>
                        </div>
                    </div>
                  
                    <div class="form-group">
                        <label class="col-md-3 col-sm-3 col-xs-12 control-label">
                            Tạo hàng tuần
                        </label>

                        <div class="col-md-9 col-sm-9 col-xs-12">
                            <div class="radio">
                                <label>
                                    @if (TempData["CustomAdd"] != null && TempData["CustomAdd"].ToString() == "1")
                                    {



                                        <input type="radio" value="1" id="optionsRadios1" name="TypedSubmit" checked />
                                    }
                                    else
                                    {

                                        <input type="radio" id="optionsRadios1" name="TypedSubmit" value="1" />
                                    }
                                    Trong 1 tháng
                                </label>
                            </div>
                            <div class="radio">
                                <label>
                                    @if (TempData["CustomAdd"] != null && TempData["CustomAdd"].ToString() == "2")
                                    {



                                        <input type="radio" id="optionsRadios2" name="TypedSubmit" value="2" checked />
                                    }
                                    else
                                    {

                                        <input type="radio" id="optionsRadios2" name="TypedSubmit" value="2" />
                                    }
                                    Trong nhiều tháng

                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="ln_solid"></div>
                    <div class="form-group">
                        <div class="col-md-9 col-sm-9 col-xs-12 col-md-offset-3">
                            <button type="submit" class="btn btn-success">Submit</button>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>
<div class="col-md-6 col-xs-12">
    <div class="x_panel">
        <div class="x_title">
            <h2>Thông tin đặt phòng</small></h2>
            <ul class="nav navbar-right panel_toolbox">
                <li>
                    <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                </li>
            </ul>
            <div class="clearfix"></div>
        </div>
            <div class="x_content" id="records_table" style="max-height:383.44px; overflow-y:scroll;">

        </div>
    </div>
</div>
</div>


<!--JS Button click show day,week,month-->
<script>
    function day() {
        var day = document.getElementById("day-container");
        var week = document.getElementById("week-container");
        var month = document.getElementById("month-container");

        if (day.style.display !== "none") {
            day.style.display = "block";
            week.style.display = "none";
            month.style.display = "none";
        }
        else {
            day.style.display = "block";
            week.style.display = "none";
            month.style.display = "none";

        }
    };
    function week() {
        var day = document.getElementById("day-container");
        var week = document.getElementById("week-container");
        var month = document.getElementById("month-container");
        if (week.style.display !== "none") {
            week.style.display = "block";
            day.style.display = "none";
            month.style.display = "none";

        }
        else {
            week.style.display = "block";
            day.style.display = "none";
            month.style.display = "none";

        }
    };
    function month() {
        var day = document.getElementById("day-container");
        var week = document.getElementById("week-container");
        var month = document.getElementById("month-container");
        if (month.style.display !== "none") {
            month.style.display = "block";
            day.style.display = "none";
            week.style.display = "none";

        }
        else {
            month.style.display = "block";
            day.style.display = "none";
            week.style.display = "none";

        }
    };
</script>
<script>
    var ba = document.getElementById("baseAddress").value;
    var em = document.getElementById("email").value;
    const app = {
        doctors: [],
        elements: {
            doctor: document.querySelector("#doctor"),
            get businessOnly() { return document.querySelector("#business-only"); },
        },

        get patientId() {
            if (!localStorage["patientId"]) {
                localStorage["patientId"] = DayPilot.guid();
            }
            return localStorage["patientId"];
        },
        async loadEvents(day) {
            const start = nav.visibleStart() > DayPilot.Date.now() ? nav.visibleStart() : DayPilot.Date.now();
            const end = nav.visibleEnd();
            const patient = app.patientId;
            const doctor = app.elements.doctor.value;

            const { data } = await DayPilot.Http.get(`${ba}/api/appointments?start=${start}&end=${end}&doctor=${doctor}`);
            if (data == null) {
                window.location.href = "/dang-nhap.html"
            }
            if (day) {
                calendar.startDate = day;
                dp.startDate = day;
            }
            calendar.events.list = data;
            dp.events.list = data;

            calendar.update();
            dp.update();

            nav.events.list = data;
            nav.update();
        },

        //Use for monthly-Calender
        async loadEventsInMonth(day) {
            let from = scheduler.visibleStart();
            let to = scheduler.visibleEnd();
            if (day) {
                from = new DayPilot.Date(day).firstDayOfMonth();

                to = from.addMonths(2);
            }

            const { data } = await DayPilot.Http.get(`${ba}/api/Appointments?start=${from}&end=${to}`);

            if (data == null) {
                window.location.href = "/dang-nhap.html"
            }

            const options = {
                events: data
            };

            if (day) {
                options.timeline = app.getTimeline(day);
                options.scrollTo = day;
            }

            scheduler.update(options);

            nav.events.list = data;
            nav.update();
        },
        async loadResources() {
            const { data } = await DayPilot.Http.get(`${ba}/api/Rooms/usergetrooms`);
            if (data == null) {
                window.location.href = "/dang-nhap.html"
            }
            scheduler.update({
                resources: data,
                visible: true
            });
        },
        getTimeline(date) {
            date = date || DayPilot.Date.today();
            const start = DayPilot.Date.today();
            const days = (start.daysInMonth()) * 3;
            const businessOnly = app.elements.businessOnly.checked;
            let morningShiftStarts = 8;
            let morningShiftEnds = 12;
            let afternoonShiftStarts = 14;
            let afternoonShiftEnds = 18;

            if (!businessOnly) {
                morningShiftStarts = 0;
                morningShiftEnds = 12;
                afternoonShiftStarts = 12;
                afternoonShiftEnds = 24;
            }

            const timeline = [];

            let increaseMorning;  // in hours
            let increaseAfternoon;  // in hours
            increaseMorning = morningShiftEnds - morningShiftStarts;
            increaseAfternoon = afternoonShiftEnds - afternoonShiftStarts;


            for (let i = 0; i < days; i++) {
                const day = start.addDays(i);

                for (let x = morningShiftStarts; x < morningShiftEnds; x += increaseMorning) {
                    timeline.push({ start: day.addHours(x), end: day.addHours(x + increaseMorning) });
                }
                for (let x = afternoonShiftStarts; x < afternoonShiftEnds; x += increaseAfternoon) {
                    timeline.push({ start: day.addHours(x), end: day.addHours(x + increaseAfternoon) });
                }
            }

            return timeline;
        },
        getTimeHeaders() {
            return [
                { groupBy: "Month" },
                { groupBy: "Day", format: "dddd d" },
                { groupBy: "Cell", format: "tt" }
            ];
        },
        async init() {
            app.loadResources();
            const { data } = await DayPilot.Http.get(`${ba}/api/Rooms/usergetrooms`);
            if (data == null) {
                window.location.href = "/dang-nhap.html"
            }
            app.doctors = data;

            app.doctors.forEach(item => {
                const option = document.createElement("option");
                option.value = item.id;
                option.innerText = item.name;
                app.elements.doctor.appendChild(option);
            });
            app.elements.doctor.addEventListener("change", () => {
                app.loadEvents();
            });

            app.elements.businessOnly.addEventListener("click", () => {
                scheduler.timeline = app.getTimeline();
                scheduler.update();
            });
            app.loadEvents();
            app.loadEventsInMonth();
        }
    };
    const nav = new DayPilot.Navigator("nav",
        {
            theme: "nav_calender",
            selectMode: "week",
            showMonths: 2,
            skipMonths: 2,
            onTimeRangeSelected: (args) => {
                const weekStarts = DayPilot.Locale.find(nav.locale).weekStarts;
                const start = args.start.firstDayOfWeek(weekStarts);
                const end = args.start.addDays(7);
                if (scheduler.visibleStart().getDatePart() <= args.day && args.day < scheduler.visibleEnd()) {
                    scheduler.scrollTo(args.day, "fast");  // just scroll
                } else {
                    app.loadEvents(args.day);  // reload and scroll
                }
                app.loadEvents(start, end);
            }

        });
    nav.init();
    function validateTextRequired(args) {
        var value = args.value || "";
        if (value.trim().length === 0) {
            args.valid = false;
            args.message = "Vui lòng điền đủ thông tin";
        }
    }
    function validateDate(args) {
        var value = args.value;
        var date = new DayPilot.Date(value);
        if (value == null) {
            args.valid = false;
            args.message = "Thời gian không hợp lệ";
        }
        else if (date.getHours() < 8) {
            args.valid = false;
            args.message = "Chưa đến thời gian làm việc";
        }
        else if (date.getHours() >= 17 && date.getMinutes() > 30 || date.getHours() >= 18) {
            args.valid = false;
            args.message = "Hết thời gian làm việc";
        }

    }
    const calendar = new DayPilot.Calendar("calendar", {
        columnWidthSpec: "Fixed",
        columnWidth: 198,
        viewType: "Week",
        timeRangeSelectedHandling: "Disabled",
        eventMoveHandling: "Disabled",
        eventResizeHandling: "Disabled",
        eventArrangement: "SideBySide",
        //columnResizeHandling: "Update",
        theme: "red_calendar",
        onBeforeEventRender: (args) => {
            switch (args.data.status) {
                case "free":
                    args.data.backColor = "#3d85c6";  // blue
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    //args.data.html = `${args.data.doctorName}<br/>Còn trống`;

                    args.data.html = "Trống";
                    args.data.toolTip = "Bấm để đặt lịch";
                    break;
                case "waiting":
                    args.data.backColor = "#e69138";  // orange
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "Chờ xác nhận...";
                    break;
                case "confirmed":
                    args.data.backColor = "#6aa84f";  // green
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "Đặt thành công";
                    break;
            }
        },
        onEventClick: async (args) => {
            if (args.e.data.status !== "free") {
                calendar.message("Vui lòng chọn thời gian khác để đặt!");
                return;
            }

            const form = [
                { name: "Đặt lịch họp" },
                { name: "Ngày bắt đầu", id: "start", dateFormat: "MMMM d, yyyy h:mm tt", disabled: true, onValidate: validateDate },
                { name: "Ngày kết thúc", id: "end", dateFormat: "MMMM d, yyyy h:mm tt", disabled: true, onValidate: validateDate },
                { name: "Ghi chú", id: "note", onValidate: validateTextRequired },
                { name: "Nội dung họp", id: "description", onValidate: validateTextRequired },
            ];

            const data = {
                id: args.e.id(),
                start: args.e.start(),
                end: args.e.end(),
                patient: app.patientId,
                //doctorId: args.e.doctorId,
                note: args.e.note,
                description: args.e.description,
            };

            const options = {
                focus: "description",
                focus: "note"
            };

            const modal = await DayPilot.Modal.form(form, data, options);
            if (modal.canceled) {
                return;
            }

            await DayPilot.Http.put(`${ba}/api/Appointments/${data.id}/request/name?name=${em}`, modal.result);

            args.e.data.status = "waiting";
            calendar.events.update(args.e.data);
            window.location.reload();

        }

    });
    const scheduler = new DayPilot.Scheduler("scheduler", {
        theme: "month_calender",
        visible: false, // will be displayed after loading the resources
        scale: "Manual",
        timeline: app.getTimeline(),
        timeHeaders: app.getTimeHeaders(),
        useEventBoxes: "Never",
        eventClickHandling: "Disabled",
        eventMoveHandling: "Disabled",
        eventResizeHandling: "Disabled",
        allowEventOverlap: false,

        onBeforeEventRender: (args) => {
            switch (args.data.status) {
                case "free":
                    args.data.backColor = "#3d85c6";
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    break;
                case "waiting":
                    args.data.backColor = "#e69138";  // orange
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    break;
                case "confirmed":
                    args.data.backColor = "#6aa84f";  // green
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    break;
            }
        },
    });
    const dp = new DayPilot.Calendar("dp", {
        timeRangeSelectedHandling: "Disabled",
        eventMoveHandling: "Disabled",
        theme: "red_calendar",
        onBeforeEventRender: (args) => {
            switch (args.data.status) {
                case "free":
                    args.data.backColor = "#3d85c6";  // blue
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    //args.data.html = `${args.data.doctorName}<br/>Còn trống`;

                    args.data.html = "Trống";
                    args.data.toolTip = "Bấm để đặt lịch";
                    break;
                case "waiting":
                    args.data.backColor = "#e69138";  // orange
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "Chờ xác nhận...";
                    break;
                case "confirmed":
                    args.data.backColor = "#6aa84f";  // green
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "Đặt thành công";
                    break;
            }
        },
        onEventClick: async (args) => {
            if (args.e.data.status !== "free") {
                dp.message("Vui lòng chọn thời gian khác để đặt!");
                return;
            }

            const form = [
                { name: "Đặt lịch họp" },
                { name: "Ngày bắt đầu", id: "start", dateFormat: "MMMM d, yyyy h:mm tt", disabled: true, onValidate: validateDate },
                { name: "Ngày kết thúc", id: "end", dateFormat: "MMMM d, yyyy h:mm tt", disabled: true, onValidate: validateDate },
                { name: "Ghi chú", id: "note", onValidate: validateTextRequired },
                { name: "Nội dung họp", id: "description", onValidate: validateTextRequired },
            ];

            const data = {
                id: args.e.id(),
                start: args.e.start(),
                end: args.e.end(),
                patient: app.patientId,
                note: args.e.note,
                description: args.e.description,
            };

            const options = {
                focus: "description",
                focus: "note"
            };

            const modal = await DayPilot.Modal.form(form, data, options);
            if (modal.canceled) {
                return;
            }

            await DayPilot.Http.put(`${ba}/api/Appointments/${data.id}/request/name?name=${em}`, modal.result);

            args.e.data.status = "waiting";
            dp.events.update(args.e.data);
            dp.message("Tạo lịch thành công!");

            setTimeout(function () {
                window.location.reload();
            }, 2500);
        }

    });
    dp.viewType = "Day";
    dp.onBeforeCellRender = function (args) {
        if (args.cell.start.getHours() >= 8 && (args.cell.start.getHours() <= 17 && args.cell.start.getMinutes() <= 30)) {
            args.cell.cssClass = "red_calender_fix_cell_business";
        }

    };
    dp.init();


    calendar.init();

    scheduler.init();
    app.init();
</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
<script>
    $(document).ready(function () {
        $.ajax({
            url: '/dat-thanh-cong.html',
            datatype: "json",
            type: "GET",
            //data: formData,
            success: function (results) {
                $("#records_table").html("");
                $("#records_table").html(results);
            },
            //error: function (xhr) {
            //    alert('Vui lòng đăng nhập lại');
            //    window.location.href = "/dang-nhap.html"
            //}
        });
    });
    $(document).ready(function () {
        $.ajax({
            type: "GET",
            url: `${ba}/api/Rooms`,
            data: "{}",
            success: function (data) {
                var s = '<option value="0">--Chọn phòng--</option>';
                for (var i = 0; i < data.length; i++) {
                    console.log(data[i])
                    s += '<option value="' + data[i].id + '">' + data[i].name + '</option>';
                }
                $("#room").html(s);
            }
        });
    });
</script>
