@page
@using System.Globalization;
@using Microsoft.Extensions.Configuration
@using WebLearning.Contract.Dtos.BookingCalender;
@inject IConfiguration Configuration
@section metatags{
    <meta name="keywords" content="VXH, ELearning, Booking, ESign, Ticket" />
    <meta name="author" content="Magentech">
    <meta name="robots" content="index, follow" />
    <meta name="description" content="VXH APP là một website tích hợp đào tạo trực tiếp cho sale cũng như một số chức năng khác dành cho nhân viên tại công ty">
    <meta property="og:site_name" content="VXH APP BOOKING" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="VXH APP BOOKING" />
    <meta property="og:image" content="@Configuration["CurrentAddress"]/build/images/LogoVXH.png" />
    <meta property="og:description" content="VXH APP là một website tích hợp đào tạo trực tiếp cho sale cũng như một số chức năng khác dành cho nhân viên tại công ty" />
    <meta property="og:url" content="@Configuration["CurrentAddress"]/" />
}
@model CreateAppointmentSlotAdvance;
@section Summernote{

    <script src="https://code.jquery.com/jquery-3.5.1.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>

    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.js"></script>

}
<style>
    .modal_default_form_item textarea {
        height: 100px;
    }

    .modal_default_main {
        top: 0;
        border: 5px solid rgb(204, 204, 204);
        max-height: 90%;
        overflow-y: scroll;
    }

    .modal_default_form_item_label {
        font-weight: bold;
        font-size: 14px;
        color: #bf040a;
    }

    .label-advance {
        padding: 0.8em 1.2em 0.9em;
        font-size: 13px;
        line-height: 1;
        color: #fff;
        text-align: center;
        white-space: nowrap;
        /*        vertical-align: baseline;
    */ border-radius: 0.8em;
    }

    .label-edit-advance {
        background-color: #f0ad4e;
    }

    .modal_default_ok {
        padding: 3px;
        width: 80px;
        color: #fff;
        border: none;
        background-color: #5cb85c;
        border-radius: 0.25em;
    }

    .modal_default_cancel {
        padding: 3px;
        width: 80px;
        color: #fff;
        border: none;
        background-color: #d9534f;
        border-radius: 0.25em;
    }
</style>
<div class="row" >
    <div class="col-md-12">
        <div class="x_panel" style="min-height:750px">
            <div class="col-md-4">
                <div class="x_title" style="min-height:39.8px;border:none">
                    
                </div>

                <div class="x_content">
                    <div class="fc-toolbar fc-header-toolbar" style="min-height:23.11px">
                    </div>
                    <div class="fc-clear"></div>

                    <div>
                        <div id="nav" style="margin:auto"></div>

                    </div>

                </div>
            </div>

            <div class="col-md-8">
                <div class="x_title">
                    <h2>Lịch sự kiện <small>Chi tiết</small></h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            Phòng:
                            <select id="doctor" name="doctor"></select>

                        </li>
                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content" id="day-container">

                    <div class="fc-toolbar fc-header-toolbar">
                        <div class="fc-left">
                            <div class="fc-button-group">
                                <a href="javascript:dp.startDate = dp.startDate.addDays(-1); dp.update();">
                                    <button type="button" class="fc-prev-button fc-button fc-state-default fc-corner-left">
                                        <span class="fc-icon fc-icon-left-single-arrow"></span>


                                    </button>
                                </a>
                                <a href="javascript:dp.startDate = dp.startDate.addDays(1); dp.update();">
                                    <button type="button" class="fc-next-button fc-button fc-state-default fc-corner-right">
                                        <span class="fc-icon fc-icon-right-single-arrow"></span>
                                    </button>
                                </a>


                            </div>
                            <button type="button" class="fc-today-button fc-button fc-state-default fc-corner-left fc-corner-right">Tuần này</button>
                        </div>
                        <div class="fc-right">
                            <div class="fc-button-group">
                                <button type="button" class="fc-agendaDay-button fc-button fc-state-default" onclick="day()">Ngày</button>
                                <button type="button" class="fc-agendaWeek-button fc-button fc-state-default" onclick="week()">Tuần</button>
                                <button type="button" class="fc-month-button fc-button fc-state-default fc-corner-left" onclick="month()">Tháng</button>
                                <button type="button" class="fc-year-button fc-button fc-state-default fc-corner-left" onclick="year()">Năm</button>
                            </div>
                        </div>
                        <div class="fc-center">
                        </div>
                        <div class="fc-clear"></div>
                    </div>
                    <div id="dp">
                    </div>
                </div>
                <div class="x_content" id="week-container" style="display:none;">
                    <div class="fc-toolbar fc-header-toolbar">
                        <div class="fc-left">
                            <div class="fc-button-group">
                                <a href="javascript:calendar.startDate = calendar.startDate.addDays(-7); calendar.update();">
                                    <button type="button" class="fc-prev-button fc-button fc-state-default fc-corner-left">
                                        <span class="fc-icon fc-icon-left-single-arrow"></span>


                                    </button>
                                </a>
                                <a href="javascript:calendar.startDate = calendar.startDate.addDays(7); calendar.update();">
                                    <button type="button" class="fc-next-button fc-button fc-state-default fc-corner-right">
                                        <span class="fc-icon fc-icon-right-single-arrow"></span>
                                    </button>
                                </a>


                            </div>
                            <button type="button" class="fc-today-button fc-button fc-state-default fc-corner-left fc-corner-right">Tuần này</button>

                        </div>
                        <div class="fc-right">
                            <div class="fc-button-group">
                                <button type="button" class="fc-agendaDay-button fc-button fc-state-default" onclick="day()">Ngày</button>
                                <button type="button" class="fc-agendaWeek-button fc-button fc-state-default" onclick="week()">Tuần</button>
                                <button type="button" class="fc-month-button fc-button fc-state-default fc-corner-left" onclick="month()">Tháng</button>
                                <button type="button" class="fc-year-button fc-button fc-state-default fc-corner-left" onclick="year()">Năm</button>

                            </div>
                        </div>
                        <div class="fc-center">
                        </div>
                        <div class="fc-clear"></div>
                    </div>
                    <div id="calendar"></div>


                </div>
                <div class="x_content" id="month-container" style="display:none;">
                    <div class="fc-toolbar fc-header-toolbar">
                        <div class="fc-right">
                            <div class="fc-button-group">
                                <button type="button" class="fc-agendaDay-button fc-button fc-state-default" onclick="day()">Ngày</button>
                                <button type="button" class="fc-agendaWeek-button fc-button fc-state-default" onclick="week()">Tuần</button>
                                <button type="button" class="fc-month-button fc-button fc-state-default fc-corner-left" onclick="month()">Tháng</button>
                                <button type="button" class="fc-year-button fc-button fc-state-default fc-corner-left" onclick="year()">Năm</button>
                            </div>
                        </div>
                        <div class="fc-center">
                        </div>
                        <div class="fc-clear"></div>
                    </div>
                    <div id="m"></div>


                </div>
                <div class="x_content" id="year-container" style="display:none;">
                    <div class="fc-toolbar fc-header-toolbar">
                        <div class="fc-left">
                            <span class="toolbar-item"><label for="business-only"><input type="checkbox" id="business-only" checked>  <span>Giờ làm việc</span></label></span>

                        </div>
                        <div class="fc-right">
                            <div class="fc-button-group">
                                <button type="button" class="fc-agendaDay-button fc-button fc-state-default" onclick="day()">Ngày</button>
                                <button type="button" class="fc-agendaWeek-button fc-button fc-state-default" onclick="week()">Tuần</button>
                                <button type="button" class="fc-month-button fc-button fc-state-default fc-corner-left" onclick="month()">Tháng</button>
                                <button type="button" class="fc-year-button fc-button fc-state-default fc-corner-left" onclick="year()">Năm</button>
                            </div>
                        </div>
                        <div class="fc-center">
                        </div>
                        <div class="fc-clear"></div>
                    </div>
                    <div id="scheduler"></div>


                </div>
            </div>
        </div>

    </div>
</div>

<div class="row">
<div class="col-md-6 col-xs-12" id="booknow">
        <div class="x_panel">
            <div class="x_title">
                <h2><i class="fa fa-edit"></i> Đặt lịch phòng họp</h2>
                <ul class="nav navbar-right panel_toolbox">
                    <li>
                        <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                    </li>              
                </ul>
                <div class="clearfix"></div>
            </div>
            <div class="x_content" style="min-height:950px;">
                <form asp-action="Add" asp-controller="Booking" method="post" enctype="multipart/form-data" class="form-horizontal form-label-left" >
                    <div class="form-group">
                        <label class="control-label col-md-2 col-sm-2 col-xs-12">Email:</label>
                        <div class="col-md-10 col-sm-10 col-xs-12">
                            <input class="form-control" name="Email" id="Email" type="text" onfocus="this.placeholder = ''" placeholder=@User.Identity.Name value="@User.Identity.Name" readonly>

                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2 col-sm-2 col-xs-12">Tiêu đề:</label>
                        <div class="col-md-10 col-sm-10 col-xs-12">
                            @if (TempData["Title"] != null)
                            {
                                <textarea id="Title" name="Title">@TempData["Title"]</textarea>

                            }
                            else
                            {
                                <textarea id="Title" name="Title"></textarea>


                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2 col-sm-2 col-xs-12">Nội dung:</label>
                        <div class="col-md-10 col-sm-10 col-xs-12">
                            @if (TempData["Description"] != null)
                            {
                                <textarea id="Description" name="Description">@TempData["Description"]</textarea>

                            }
                            else
                            {
                                <textarea id="Description" name="Description"></textarea>

                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2 col-sm-2 col-xs-12">Ghi chú:</label>
                        <div class="col-md-10 col-sm-10 col-xs-12">
                            @if (TempData["Note"] != null)
                            {
                                <textarea id="Note" name="Note">@TempData["Note"]</textarea>

                            }
                            else
                            {
                                <textarea id="Note" name="Note"></textarea>


                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2 col-sm-2 col-xs-12">Bắt đầu:</label>
                        <div class="col-md-4 col-sm-4 col-xs-12">
                            @if (TempData["FromDate"] != null)
                            {
                                <div class="input-group date" id="myDatepicker">
                                    <input type="text" class="form-control col-md-10" name="Start" id="Start" value='@TempData["FromDate"]'>
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            }
                            else
                            {
                                <div class="input-group date" id="myDatepicker">
                                    <input type="text" class="form-control col-md-10" name="Start" id="Start">
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            }
                        </div>
                        <label class="control-label col-md-2 col-sm-2 col-xs-12">Kết thúc:</label>
                        <div class="col-md-4 col-sm-4 col-xs-12">
                            @if (TempData["ToDate"] != null)
                            {
                                <div class="input-group date" id="toDate">
                                    <input type="text" class="form-control col-md-10" name="End" id="End" value='@TempData["ToDate"]' />
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            }
                            else
                            {
                                <div class="input-group date" id="toDate">
                                    <input type="text" class="form-control col-md-10" name="End" id="End" />
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2 col-sm-2 col-xs-12">Phòng:</label>
                        <div class="col-md-10 col-sm-10 col-xs-12">
                            <select class="select2_single form-control" tabindex="-1" id="room" name="Room">
                            </select>
                        </div>
                    </div>
                  
                    <div class="form-group">
                        <label class="col-md-2 col-sm-2 col-xs-12 control-label">
                            Tạo hàng tuần
                        </label>

                        <div class="col-md-10 col-sm-10 col-xs-12">
                            <div class="radio">
                                <label>
                                    @if (TempData["CustomAdd"] != null && TempData["CustomAdd"].ToString() == "1")
                                    {



                                        <input type="radio" value="1" id="optionsRadios1" name="TypedSubmit" checked />
                                    }
                                    else
                                    {

                                        <input type="radio" id="optionsRadios1" name="TypedSubmit" value="1" />
                                    }
                                    Trong 1 tháng
                                </label>
                            </div>
                            <div class="radio">
                                <label>
                                    @if (TempData["CustomAdd"] != null && TempData["CustomAdd"].ToString() == "2")
                                    {



                                        <input type="radio" id="optionsRadios2" name="TypedSubmit" value="2" checked />
                                    }
                                    else
                                    {

                                        <input type="radio" id="optionsRadios2" name="TypedSubmit" value="2" />
                                    }
                                    Trong nhiều tháng

                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="ln_solid"></div>
                    <div class="form-group">
                        <div class="col-md-9 col-sm-9 col-xs-12 col-md-offset-3">
                            <button type="submit" class="btn btn-success">Đặt phòng</button>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>
<div class="col-md-6 col-xs-12">
    <div class="x_panel">
        <div class="x_title">
            <h2><i class="fa fa-history"></i> Thông tin đặt phòng<small>Gần đây</small></h2>
            <ul class="nav navbar-right panel_toolbox">
                <li>
                    <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                </li>
            </ul>
            <div class="clearfix"></div>
        </div>
            <div class="x_content" id="records_table" style="max-height:950px; overflow-y:scroll;">

        </div>
    </div>
</div>
</div>
<!--Add summernote text editor-->
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js"></script>

<script type="text/javascript" src="~/booking/js/summernoteonline.js"></script>
<script type="text/javascript" src="~/booking/js/clickbutton.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        $('#m>div:contains("DEMO")').css('display', 'none');
    });
</script>

<script type="text/javascript" src="/booking/js/connection.js"></script>
<!--Add Daypilot calendar-->
<script>
    const app = {
        doctors: [],
        elements: {
            doctor: document.querySelector("#doctor"),
            get businessOnly() { return document.querySelector("#business-only"); },
        },

        get patientId() {
            if (!localStorage["patientId"]) {
                localStorage["patientId"] = DayPilot.guid();
            }
            return localStorage["patientId"];
        },
        async loadEvents(day) {
            const start = nav.visibleStart() > DayPilot.Date.now() ? nav.visibleStart() : DayPilot.Date.now();
            const end = nav.visibleEnd();
            const patient = app.patientId;
            const doctor = app.elements.doctor.value;

            const { data } = await DayPilot.Http.get(`${window.location.origin}/lich-theo-ngay-va-tuan/` + `${start}/${end}/${doctor}`);

            if (day) {
                calendar.startDate = day;
                dp.startDate = day;
                m.startDate = day;
            }
            calendar.events.list = data;
            dp.events.list = data;
            m.events.list = data;
            calendar.update();
            dp.update();
            m.update();

            nav.events.list = data;
            nav.update();
        },

        //Use for monthly-Calender
        async loadEventsInMonth(day) {
            let from = scheduler.visibleStart();
            let to = scheduler.visibleEnd();
            if (day) {
                from = new DayPilot.Date(day).firstDayOfMonth();

                to = from.addMonths(2);
            }

            const { data } = await DayPilot.Http.get(`${window.location.origin}/lich-theo-thang/` + `${from}/${to}`);

            const options = {
                events: data
            };

            if (day) {
                options.timeline = app.getTimeline(day);
                options.scrollTo = day;
            }

            scheduler.update(options);

            nav.events.list = data;
            nav.update();
        },
        async loadResources() {
            const { data } = await DayPilot.Http.get(`${window.location.origin}/danh-sach-phong`);

            scheduler.update({
                resources: data,
                visible: true
            });
        },
        getTimeline(date) {
            date = date || DayPilot.Date.today();
            const start = DayPilot.Date.today();
            const days = (start.daysInYear());
            const businessOnly = app.elements.businessOnly.checked;
            let morningShiftStarts = 8;
            let morningShiftEnds = 12;
            let afternoonShiftStarts = 12;
            let afternoonShiftEnds = 18;

            let increaseMorning;  // in hours
            let increaseAfternoon; // in hours

            increaseMorning = 1;  // in hours
            increaseAfternoon = 1; // in hours

            if (!businessOnly) {
                morningShiftStarts = 0;
                morningShiftEnds = 12;
                afternoonShiftStarts = 12;
                afternoonShiftEnds = 24;

            }

            const timeline = [];


            for (let i = 0; i < days; i++) {
                const day = start.addDays(i);

                for (let x = morningShiftStarts; x < morningShiftEnds; x += increaseMorning) {
                    timeline.push({ start: day.addHours(x), end: day.addHours(x + increaseMorning) });
                }
                for (let x = afternoonShiftStarts; x < afternoonShiftEnds; x += increaseAfternoon) {
                    timeline.push({ start: day.addHours(x), end: day.addHours(x + increaseAfternoon) });
                }
            }

            return timeline;
        },
        getTimeHeaders() {
            return [
                //{ groupBy: "Month" },
                //{ groupBy: "Day", format: "dddd d" },
                //{ groupBy: "Cell", format: "tt" }
                { groupBy: "Day", format: "dddd, dd/MM/yyyy" },
                { groupBy: "Hour", format: "h tt" }

            ];


        },
        async init() {
            app.loadResources();
            const { data } = await DayPilot.Http.get(`${window.location.origin}/danh-sach-phong`);

            app.doctors = data;

            app.doctors.forEach(item => {
                const option = document.createElement("option");
                option.value = item.id;
                option.innerText = item.name;
                app.elements.doctor.appendChild(option);
            });
            app.elements.doctor.addEventListener("change", () => {
                app.loadEvents();
            });

            app.elements.businessOnly.addEventListener("click", () => {
                scheduler.timeline = app.getTimeline();
                scheduler.update();
            });
            app.loadEvents();
            app.loadEventsInMonth();
        }
    };
    const nav = new DayPilot.Navigator("nav",
        {
            theme: "nav_calender",
            selectMode: "week",
            showMonths: 2,
            skipMonths: 2,
            onTimeRangeSelected: (args) => {
                const weekStarts = DayPilot.Locale.find(nav.locale).weekStarts;
                const start = args.start.firstDayOfWeek(weekStarts);
                const end = args.start.addDays(7);

                if (scheduler.visibleStart().getDatePart() <= args.day && args.day < scheduler.visibleEnd()) {
                    scheduler.scrollTo(args.day, "fast"); 
                } else {
                    app.loadEvents(args.day);  // reload and scroll
                }
                app.loadEvents(start, end);
            }

        });
    nav.init();
    function validateTextRequired(args) {
        var value = args.value || "";
        if (value.trim().length === 0) {
            args.valid = false;
            args.message = "Vui lòng điền đủ thông tin";
        }
    }
    function validateDate(args) {
        var value = args.value;
        var date = new DayPilot.Date(value);
        if (value == null) {
            args.valid = false;
            args.message = "Thời gian không hợp lệ";
        }
        else if (date.getHours() < 8) {
            args.valid = false;
            args.message = "Chưa đến thời gian làm việc";
        }
        else if (date.getHours() >= 17 && date.getMinutes() > 30 || date.getHours() >= 18) {
            args.valid = false;
            args.message = "Hết thời gian làm việc";
        }

    }

    const calendar = new DayPilot.Calendar("calendar", {
        columnWidthSpec: "Fixed",
        columnWidth: 200,
        viewType: "Week",
        timeRangeSelectedHandling: "Disabled",
        eventMoveHandling: "Disabled",
        eventResizeHandling: "Disabled",
        eventArrangement: "SideBySide",
        cellDuration: 30,
        cellHeight: "100",
        heightSpec: "Fixed",
        dayBeginsHour: 8,
        dayEndsHour: 18,
        height: 600,
        theme: "red_calendar",
        onBeforeEventRender: (args) => {

            switch (args.data.status) {
                case "free":
                    args.data.backColor = "#bebebe";  // blue
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    //args.data.html = `${args.data.doctorName}<br/>Còn trống`;

                    args.data.html = "Trạng thái: Trống";
                    args.data.toolTip = "Bấm để đặt lịch";
                    break;
                case "waiting":
                    args.data.backColor = "#e69138";  // orange
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = `<span style="text-decoration:underline">Trạng thái:  </span> <span style="font-weight:bold;font-size:13px">CHỜ XÁC NHẬN...</span><br>
                                <span style="text-decoration:underline">Người đặt:</span>  ${args.data.email}<br>
                            <span style="text-decoration:underline">Tiêu đề:</span>  ${args.data.text}<br>`;
                    break;
                case "confirmed":
                    args.data.backColor = "#6aa84f";  // green
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = `<span style="text-decoration:underline">Trạng thái:  </span> <span style="font-weight:bold;font-size:13px">ĐẶT THÀNH CÔNG</span><br>
                                <span style="text-decoration:underline">Người đặt:</span>  ${args.data.email}<br>
                                <span style="text-decoration:underline">Tiêu đề:</span>  ${args.data.text}<br>
`;
                    break;
            }
            if (args.e.text == null) {
                if (args.e.status == "free") {
                    args.e.bubbleHtml = "Tiêu đề: Chưa có <br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#bebebe;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Trống</span><br>";
                }
            } else {
                if (args.e.status == "waiting") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#f0ad4e;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Chờ xác nhận...</span><br>";
                }
                if (args.e.status == "confirmed") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#5cb85c;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Đặt thành công</span><br>";
                }
            }
        },
        onEventClick: async (args) => {
            if (args.e.data.status !== "free") {
                const form = [
                    { name: "Cập nhật thông tin phòng" },
                    { name: "Tiêu đề", id: "text", onValidate: validateTextRequired },
                    { name: "Nội dung", id: "description", onValidate: validateTextRequired, type: "textarea" },
                    {
                        type: 'html',
                        html: `<span style='font-size:14px;font-weight:bold;color:#bf040a'>Nội dung hiển thị: </span><br>${args.e.data.description}`,
                    },
                    { name: "Ghi chú", id: "note", onValidate: validateTextRequired, type: "textarea",height: 50 },
                    {
                        type: 'html',
                        html: `<span style='font-size:14px;font-weight:bold;color:#bf040a'>Nội dung hiển thị: </span><br>${args.e.data.note}`,
                    },
                    { name: "Tình trạng", id: "status", disabled: true },
                    {
                        name: "Tạo lịch", id: "customAdd", type: "radio", options: [
                            {
                                name: ' Tạo lịch hàng tuần trong 1 tháng',
                                id: '1',
                            },
                            {
                                name: ' Tạo lịch hàng tuần trong nhiều tháng',
                                id: '2',
                            },
                            {
                                name: ' Khác',
                                id: '3',
                            },
                        ]
                    },
                    { name: "Ngày bắt đầu", id: "start", dateFormat: "dd/MM/yyyy h:mm tt", onValidate: validateDate },
                    { name: "Ngày kết thúc", id: "end", dateFormat: "dd/MM/yyyy h:mm tt", onValidate: validateDate },
                    { name: "Phòng", id: "resource", options: app.rooms, onValidate: validateTextRequired },
                    {
                        type: 'html',
                        html: 'Ghi chú: Hội trường: 1, Lầu 2: 2, Lầu 3: 3, ...',
                    },
                    {
                        type: 'html',
                        html: `<a class="label-advance label-edit-advance" href="/cap-nhat/${args.e.data.id}">Chỉnh sửa nâng cao</a>`
                    },
                ];
                const data = args.e.data;
                const options = {
                    focus: "text",
                    focus: "start",
                    focus: "end",
                    focus: "note",
                    focus: "description",
                    focus: "resource",
                    focus: "customAdd",
                    scrollWithPage: false,

                };

                const modal = await DayPilot.Modal.form(form, data, options);
                if (modal.canceled) {
                    return;
                }

                const params = {
                    ...args.e.data,
                    name: modal.result.text,
                    start: modal.result.start,
                    end: modal.result.end,
                    resource: modal.result.resource,
                    note: modal.result.note,
                    description: modal.result.description,
                    resource: modal.result.resource,
                    customAdd: modal.result.customAdd,
                };
                const check = await DayPilot.Modal.confirm("Bạn có muốn thay đổi?", { okText: "Xác nhận", cancelText: "Không" });
                if (check.result == "OK") {

                    var rs = await DayPilot.Http.put(`${ba}/api/Appointments/${params.id}/${em}`, params);
                    calendar.events.update(modal.result);

                    calendar.message(rs.data.message);

                    if (rs.data.message == "Cập nhật thành công!") {
                        app.loadEvents();

                    }
                    return;
                } else {
                    dp.message("Hủy thao tác thành công!");
                    return;
                }
            }

            const form = [
                { name: "Đặt lịch họp" },
                { name: "Ngày bắt đầu", id: "start", dateFormat: "dd/MM/yyyy h:mm tt", disabled: true, onValidate: validateDate },
                { name: "Ngày kết thúc", id: "end", dateFormat: "dd/MM/yyyy h:mm tt", disabled: true, onValidate: validateDate },
                { name: "Tiêu đề", id: "name", onValidate: validateTextRequired },
                { name: "Nội dung họp", id: "description", onValidate: validateTextRequired, type: "textarea" },
                { name: "Ghi chú", id: "note", onValidate: validateTextRequired, type: "textarea" },

                
            ];

            const data = {
                id: args.e.id(),
                start: args.e.start(),
                end: args.e.end(),
                patient: app.patientId,
                name: args.e.name,
                note: args.e.note,
                description: args.e.description,
            };

            const options = {
                focus: "description",
                focus: "note",
                focus: "name",
                scrollWithPage: false,

            };

            const modal = await DayPilot.Modal.form(form, data, options);
            if (modal.canceled) {
                return;
            }

            var rs = await DayPilot.Http.put(`${ba}/api/Appointments/${data.id}/request/name?name=${em}`, modal.result);

            args.e.data.status = "waiting";
            calendar.events.update(args.e.data);
            calendar.message(rs.data.message);
            app.loadEvents();

        }

    });
    const scheduler = new DayPilot.Scheduler("scheduler", {
        theme: "month_calender",
        visible: false, // will be displayed after loading the resources
        scale: "Manual",

        timeline: app.getTimeline(),

        rowHeaderWidth: 100,
        rowMinHeight: 112,
        eventHeight: 112,
        cellWidth: 50,
        timeHeaders: app.getTimeHeaders(),
        useEventBoxes: "Never",
        eventClickHandling: "Disabled",
        eventMoveHandling: "Disabled",
        eventResizeHandling: "Disabled",
        allowEventOverlap: false,
        onBeforeEventRender: (args) => {
            if (args.e.text == null) {
                if (args.e.status == "free") {
                    args.e.bubbleHtml = "Tiêu đề: Chưa có <br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#bebebe;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Trống</span><br>";
                }
            } else {
                if (args.e.status == "waiting") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#f0ad4e;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Chờ xác nhận...</span><br>";
                }
                if (args.e.status == "confirmed") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#5cb85c;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Đặt thành công</span><br>";
                }
            }
            switch (args.data.status) {
                case "free":
                    args.data.backColor = "#bebebe";
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "";
                    break;
                case "waiting":
                    args.data.backColor = "#e69138";  // orange
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "";
                    break;
                case "confirmed":
                    args.data.backColor = "#6aa84f";  // green
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "";
                    break;
            }
        },
    });
    scheduler.cellBubble = new DayPilot.Bubble({
        onLoad: function (args) {
            var cell = args.source;

            args.html = cell.start.toString("dd/MM/yyyy");
        }
    });




    const dp = new DayPilot.Calendar("dp", {
        timeRangeSelectedHandling: "Disabled",
        eventMoveHandling: "Disabled",
        theme: "red_calendar",
        dayBeginsHour: 8,
        dayEndsHour: 18,
        cellHeight: "80",
        height: 600,
        heightSpec: "Fixed",
        onBeforeEventRender: (args) => {
            if (args.e.text == null) {
                if (args.e.status == "free") {
                    args.e.bubbleHtml = "Tiêu đề: Chưa có <br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#bebebe;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Trống</span><br>";
                }
            } else {
                if (args.e.status == "waiting") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#f0ad4e;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Chờ xác nhận...</span><br>";
                }
                if (args.e.status == "confirmed") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#5cb85c;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Đặt thành công</span><br>";
                }
            };
            switch (args.data.status) {
                case "free":
                    args.data.backColor = "#bebebe";  // blue
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    //args.data.html = `${args.data.doctorName}<br/>Còn trống`;

                    args.data.html = "Trạng thái: Trống";
                    args.data.toolTip = "Bấm để đặt lịch";
                    break;
                case "waiting":
                    args.data.backColor = "#e69138";  // orange
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = `<span style="text-decoration:underline">Trạng thái:  </span> <span style="font-weight:bold;font-size:13px">CHỜ XÁC NHẬN...</span><br>
                                    <span style="text-decoration:underline">Người đặt:</span>  ${args.data.email}<br>
                                <span style="text-decoration:underline">Tiêu đề:</span>  ${args.data.text}<br>`;
                    break;
                case "confirmed":
                    args.data.backColor = "#6aa84f";  // green
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = `<span style="text-decoration:underline">Trạng thái:  </span> <span style="font-weight:bold;font-size:13px">ĐẶT THÀNH CÔNG</span><br>
                                    <span style="text-decoration:underline">Người đặt:</span>  ${args.data.email}<br>
                                    <span style="text-decoration:underline">Tiêu đề:</span>  ${args.data.text}<br>`;
                    break;
            }
        },
        onEventClick: async (args) => {
            if (args.e.data.status !== "free") {
                if (args.e.data.status !== "free") {
                    const form = [
                        { name: "Cập nhật thông tin phòng" },
                        { name: "Tiêu đề", id: "text", onValidate: validateTextRequired },
                        { name: "Nội dung", id: "description", onValidate: validateTextRequired, type: "textarea" },
                        {
                            type: 'html',
                            html: `<span style='font-size:14px;font-weight:bold;color:#bf040a'>Nội dung hiển thị: </span><br>${args.e.data.description}`,
                        },
                        { name: "Ghi chú", id: "note", onValidate: validateTextRequired, type: "textarea", height: 50 },
                        {
                            type: 'html',
                            html: `<span style='font-size:14px;font-weight:bold;color:#bf040a'>Nội dung hiển thị: </span><br>${args.e.data.note}`,
                        },
                        { name: "Tình trạng", id: "status", disabled: true },
                        {
                            name: "Tạo lịch", id: "customAdd", type: "radio", options: [
                                {
                                    name: ' Tạo lịch hàng tuần trong 1 tháng',
                                    id: '1',
                                },
                                {
                                    name: ' Tạo lịch hàng tuần trong nhiều tháng',
                                    id: '2',
                                },
                                {
                                    name: ' Khác',
                                    id: '3',
                                },
                            ]
                        },
                        { name: "Ngày bắt đầu", id: "start", dateFormat: "dd/MM/yyyy h:mm tt", onValidate: validateDate },
                        { name: "Ngày kết thúc", id: "end", dateFormat: "dd/MM/yyyy h:mm tt", onValidate: validateDate },
                        { name: "Phòng", id: "resource", options: app.rooms, onValidate: validateTextRequired },
                        {
                            type: 'html',
                            html: 'Ghi chú: Hội trường: 1, Lầu 2: 2, Lầu 3: 3, ...',
                        },
                        {
                            type: 'html',
                            html: `<a class="label-advance label-edit-advance" href="/cap-nhat/${args.e.data.id}">Chỉnh sửa nâng cao</a>`
                        },
                    ];
                    const data = args.e.data;
                    const options = {
                        focus: "text",
                        focus: "start",
                        focus: "end",
                        focus: "note",
                        focus: "description",
                        focus: "resource",
                        focus: "customAdd",
                        scrollWithPage: false,

                    };

                    const modal = await DayPilot.Modal.form(form, data, options);
                    if (modal.canceled) {
                        return;
                    }

                    const params = {
                        ...args.e.data,
                        name: modal.result.text,
                        start: modal.result.start,
                        end: modal.result.end,
                        resource: modal.result.resource,
                        note: modal.result.note,
                        description: modal.result.description,
                        resource: modal.result.resource,
                        customAdd: modal.result.customAdd,
                    };
                    const check = await DayPilot.Modal.confirm("Bạn có muốn thay đổi?",{ okText: "Xác nhận", cancelText: "Không"});
                    if (check.result == "OK") {

                        var rs = await DayPilot.Http.put(`${ba}/api/Appointments/${params.id}/${em}`, params);

                        dp.events.update(modal.result);

                        dp.message(rs.data.message);

                        if (rs.data.message == "Cập nhật thành công!") {
                            app.loadEvents();

                        }
                        return;

                    } else {
                        dp.message("Hủy thao tác thành công!");
                        return;

                    }
                }
            }

            const form = [
                { name: "Đặt lịch họp" },
                { name: "Ngày bắt đầu", id: "start", dateFormat: "dd/MM/yyyy h:mm tt", disabled: true, onValidate: validateDate },
                { name: "Ngày kết thúc", id: "end", dateFormat: "dd/MM/yyyy h:mm tt", disabled: true, onValidate: validateDate },
                { name: "Tiêu đề", id: "name", onValidate: validateTextRequired },
{ name: "Nội dung họp", id: "description", onValidate: validateTextRequired, type: "textarea" },
                { name: "Ghi chú", id: "note", onValidate: validateTextRequired, type: "textarea" },
                
            ];

            const data = {
                id: args.e.id(),
                name: args.e.name,
                start: args.e.start(),
                end: args.e.end(),
                patient: app.patientId,
                note: args.e.note,
                description: args.e.description,
            };

            const options = {
                focus: "description",
                focus: "note",
                focus: "name",
                theme: "modal_default",
            };

            const modal = await DayPilot.Modal.form(form, data, options);
            if (modal.canceled) {
                return;
            }

            var rs = await DayPilot.Http.put(`${ba}/api/Appointments/${data.id}/request/name?name=${em}`, modal.result);

            args.e.data.status = "waiting";
            dp.events.update(args.e.data);
            dp.message(rs.data.message);

            app.loadEvents();

        }

    });
    dp.viewType = "Day";
    dp.onBeforeCellRender = function (args) {
        if (args.cell.start.getHours() >= 8 && (args.cell.start.getHours() <= 17 && args.cell.start.getMinutes() <= 30)) {
            args.cell.cssClass = "red_calender_fix_cell_business";
        }

    };

    const m = new DayPilot.Month("m", {
        maxEvents: 19,
        cellMarginBottom: 20,
        height: 630,
        theme: "m_calendar",
        heightSpec: "Fixed",
        minCellHeight: 10,
        eventHeight: 25,
        eventMoveHandling: "Disabled",
        eventResizeHandling: "Disabled",
        onBeforeEventRender: (args) => {
            switch (args.data.status) {
                case "free":
                    args.data.backColor = "#bebebe";  // gray
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    //args.data.html = `${args.data.doctorName}<br/>Còn trống`;
                    args.data.html = `${args.data.start.toString("HH:mm")}-${args.data.end.toString("HH:mm")}`;

                    break;
                case "waiting":
                    args.data.backColor = "#e69138";  // orange
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = `${args.data.start.toString("HH:mm")}-${args.data.end.toString("HH:mm")}`;
                    break;
                case "confirmed":
                    args.data.backColor = "#6aa84f";  // green
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = `${args.data.start.toString("HH:mm")}-${args.data.end.toString("HH:mm")}`;

                    break;
            }
            if (args.e.text == null) {
                if (args.e.status == "free") {
                    args.e.bubbleHtml = "Tiêu đề: Chưa có <br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#bebebe;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Trống</span><br>";
                }
            } else {
                if (args.e.status == "waiting") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#f0ad4e;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Chờ xác nhận...</span><br>";
                }
                if (args.e.status == "confirmed") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#5cb85c;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Đặt thành công</span><br>";
                }
            }
        }, onBeforeCellRender: (args) => {
            const events = args.cell.events();
            if (args.cell.start.getDayOfWeek() === 7) {
                args.cell.properties.backColor = "#eeeeee";
            }

            const maxSpecified = typeof m.maxEvents === "number";
            if (maxSpecified && events.length > m.maxEvents) {
                const more = events.length - m.maxEvents;
                let text = "+" + more + " events";
                if (more === 1) {
                    text = "+1 event";
                }
                args.cell.areas = [
                    {
                        left: 0,
                        right: 0,
                        bottom: 0,
                        height: 25,
                        text: text,
                        //onClick: (args) => {
                        //    const form = [];
                        //    const options ={
                        //        height:"30",
                        //        width: "45",
                        //        autoStretch: true,

                        //    };
                        //    events.forEach(e => {
                        //        form.push({ html: `<div style="border: 1px solid black">Tiêu đề: ${e.text()}<br>Ngày bắt đầu: ${e.start()}<br>Ngày kết thúc: ${e.end()}<br>Phòng: ${e.resource()}</div>` })
                        //    });
                        //    DayPilot.Modal.form(form,options);

                        //}
                    }
                ];
            }
        }
    });
    calendar.onBeforeCellRender = function (args) {
        if (args.cell.start.getDatePart().getTime() === new DayPilot.Date().getDatePart().getTime()) {
            args.cell.backColor = "#d5f3fe";
        }
    };
    m.onBeforeCellRender = function (args) {
        if (args.cell.start.getDatePart().getTime() === new DayPilot.Date().getDatePart().getTime()) {
            args.cell.backColor = "#d5f3fe";
        }
    };
    scheduler.onBeforeCellRender = function (args) {
        if (args.cell.start.getDatePart().getTime() === new DayPilot.Date().getDatePart().getTime()) {
            args.cell.backColor = "#d5f3fe";
        }
    };
    m.init();
    dp.init();
    calendar.init();
    scheduler.init();
    app.init();
</script>





