
@inject IHttpContextAccessor Accessor
@using Microsoft.Extensions.Configuration
@using WebLearning.Contract.Dtos.BookingCalender.Room;
@inject IConfiguration Configuration
@model CreateRoomDto;
@section metatags{
    <meta name="keywords" content="VXH, ELearning, Booking, ESign, Ticket" />
    <meta name="author" content="Magentech">
    <meta name="robots" content="index, follow" />
    <meta name="description" content="VXH APP là một website tích hợp đào tạo trực tiếp cho sale cũng như một số chức năng khác dành cho nhân viên tại công ty">
    <meta property="og:site_name" content="VXH APP BOOKING" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="VXH APP BOOKING" />
    <meta property="og:image" content="@Configuration["CurrentAddress"]/build/images/LogoVXH.png" />
    <meta property="og:description" content="VXH APP là một website tích hợp đào tạo trực tiếp cho sale cũng như một số chức năng khác dành cho nhân viên tại công ty" />
    <meta property="og:url" content="@Configuration["CurrentAddress"]/" />
}
<div class="row">
    <div class="col-md-12">
        <div class="x_panel" style="min-height:750px">
            <div class="col-md-4">
                <div class="x_title" style="min-height:39.8px;border:none">
                </div>

                <div class="x_content">
                    <div class="fc-toolbar fc-header-toolbar" style="min-height:23.11px">
                    </div>
                    <div class="fc-clear"></div>

                    <div>
                        <div id="nav" style="margin:auto"></div>

                    </div>

                </div>
            </div>

            <div class="col-md-8">
                <div class="x_title">
                    <h2>Lịch sự kiện <small>Chi tiết</small></h2>
                    
                    <div class="clearfix"></div>
                </div>
                <div class="x_content" id="month-container" style="height:auto;margin:auto">
                    <div class="fc-toolbar fc-header-toolbar">
                        <div class="fc-left">
                            <span class="toolbar-item"><label for="business-only"><input type="checkbox" id="business-only"> <strong>Giờ làm việc</strong></label></span>
                        </div>
                        <div class="fc-right">
                            <div class="fc-button-group">

                                <label for='scale-hours'><input type="radio" value="hours" name="scale" id='scale-hours' switch-wrap d-flex justify-content-between checked><strong>Theo giờ</strong> </label>
                                <label for='scale-shifts'><input type="radio" value="shifts" name="scale" id='scale-shifts'> <strong>Theo ca</strong></label>
                            </div>
                        </div>
                        <div class="fc-center">
                        </div>
                        <div class="fc-clear"></div>
                    </div>
                    <div id="scheduler"></div><br />
                    <table>
                        <tr>
                            <th>
                            </th>
                            <th></th>
                        </tr>
                        <tr>
                            <td>
                                Xóa lịch trống tháng này:
                            </td>
                            <td>
                                <button id="clear" class="btn btn-danger" style="margin-left:10px">Xóa</button>
                            </td>
                        </tr>
                        <tr style="margin-top:5px">
                            <td>
                                Tạo lịch trống cho 4 tháng:
                            </td>
                            <td>
                                <button id="autoadd" class="btn btn-success" style="margin-left:10px">Tạo mới</button>
                            </td>
                        </tr>
                        <tr>

                            <form asp-action="CreateRoom" asp-controller="Room" method="post" enctype="multipart/form-data">
                            <td>
                                <div class="form-group">
                                    <input type="text" class="form-control" asp-for="@Model.Name" placeholder="Tên phòng:" />
                                </div>

                            </td>
                            <td>
                                <input type="submit" class="btn btn-success" value="Tạo mới" style="margin-left:10px" />

                            </td>
                            </form>

                        </tr>
                    </table>


                </div>
            </div>
        </div>

    </div>
</div>
<div class="row">
    <div class="col-md-9 mt-sm-20">
        <div style="margin-top:5px">
        </div>
    </div>
</div>
<form>
</form>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script type="text/javascript" src="/booking/js/connection.js"></script>
<script>
    $(document).ready(function () {
        $('#dp:contains("You are using a trial version of DayPilot Pro.")').replaceWith("Vui lòng f5 lại trang để load lại dữ liệu! ");

    });

</script>
<script>
    const app = {

        elements: {
            get businessOnly() { return document.querySelector("#business-only"); },
            get radios() { return Array.apply(null, document.querySelectorAll("input[name=scale]")); },
            get clear() { return document.querySelector("#clear"); },
            get autoadd() { return document.querySelector("#autoadd"); },
            get scaleChecked() { return document.querySelector("input[name=scale]:checked"); }
        },
        async loadEvents(day) {
            let from = scheduler.visibleStart();
            let to = scheduler.visibleEnd();
            if (day) {
                from = new DayPilot.Date(day).firstDayOfMonth();
                to = from.addMonths(1);
            }

            const { data } = await DayPilot.Http.get(`${window.location.origin}/lich-theo-thang-admin/` + `${from}/${to}`);



            const options = {
                events: data
            };

            if (day) {
                options.timeline = app.getTimeline(day);
                options.scrollTo = day;
            }

            scheduler.update(options);

            nav.events.list = data;
            nav.update();
        },

        async loadResources() {
            const { data } = await DayPilot.Http.get(`${window.location.origin}/danh-sach-phong`);

            scheduler.update({
                resources: data,
                visible: true
            });
        },
        getTimeline(date) {
            date = date || DayPilot.Date.today();
            const start = new DayPilot.Date(date).firstDayOfMonth();
            const days = start.daysInMonth();
            const scale = app.elements.scaleChecked.value;
            const businessOnly = app.elements.businessOnly.checked;
            let morningShiftStarts = 8;
            let morningShiftEnds = 12;
            let afternoonShiftStarts = 12;
            let afternoonShiftEnds = 18;

            if (!businessOnly) {
                morningShiftStarts = 0;
                morningShiftEnds = 12;
                afternoonShiftStarts = 12;
                afternoonShiftEnds = 24;
            }

            const timeline = [];

            let increaseMorning;  // in hours
            let increaseAfternoon;  // in hours
            switch (scale) {
                case "30min":
                    increaseMorning = 0.5;
                    increaseAfternoon = 0.5;
                    break;
                case "hours":
                    increaseMorning = 1;
                    increaseAfternoon = 1;
                    break;
                case "shifts":
                    increaseMorning = morningShiftEnds - morningShiftStarts;
                    increaseAfternoon = afternoonShiftEnds - afternoonShiftStarts;
                    break;
                default:
                    throw "Invalid scale value";
            }

            for (let i = 0; i < days; i++) {
                const day = start.addDays(i);

                for (let x = morningShiftStarts; x < morningShiftEnds; x += increaseMorning) {
                    timeline.push({ start: day.addHours(x), end: day.addHours(x + increaseMorning) });
                }
                for (let x = afternoonShiftStarts; x < afternoonShiftEnds; x += increaseAfternoon) {
                    timeline.push({ start: day.addHours(x), end: day.addHours(x + increaseAfternoon) });
                }
            }

            return timeline;
        },
        getTimeHeaders() {
            const scale = app.elements.scaleChecked.value;
            switch (scale) {
                case "30min":
                    return [
                        { groupBy: "Month" },
                        { groupBy: "Day", format: "dddd d" },
                        { groupBy: "Hour", format: "h tt" },
                        { groupBy: "Cell", format: "m" }
                    ];
                case "hours":
                    return [
                        { groupBy: "Month" },
                        { groupBy: "Day", format: "dddd d" },
                        { groupBy: "Hour", format: "h tt" }
                    ];
                case "shifts":
                    return [
                        { groupBy: "Month" },
                        { groupBy: "Day", format: "dddd d" },
                        { groupBy: "Cell", format: "tt" }
                    ];
            }
        },

        init() {
            app.loadResources();
            app.loadEvents(DayPilot.Date.today());

            app.elements.businessOnly.addEventListener("click", () => {
                scheduler.timeline = app.getTimeline();
                scheduler.update();
            });

            app.elements.radios.forEach(item => {
                item.addEventListener("change", () => {
                    scheduler.timeline = app.getTimeline();
                    scheduler.timeHeaders = app.getTimeHeaders();
                    scheduler.update();
                });
            });

            app.elements.clear.addEventListener("click", async () => {
                const dp = scheduler;
                const params = {
                    start: dp.visibleStart(),
                    end: dp.visibleEnd()
                };

                const { data } = await DayPilot.Http.post(`${ba}/api/Appointments/clear`, params);
                scheduler.message(data.message);

                app.loadEvents();
            });
            app.elements.autoadd.addEventListener("click", async () => {
                const dp = scheduler;
                const params = {
                    start: dp.visibleStart(),
                    end: dp.visibleEnd()
                };

                const { data } = await DayPilot.Http.post(`${ba}/api/Appointments/create/months`, params);
                scheduler.message(data.message);

                app.loadEvents();
            });
        }

    };

    const nav = new DayPilot.Navigator("nav", {
        theme: "nav_calender",
        selectMode: "month",
        showMonths: 2,
        skipMonths: 2,
        onTimeRangeSelected: args => {
            if (scheduler.visibleStart().getDatePart() <= args.day && args.day < scheduler.visibleEnd()) {
                scheduler.scrollTo(args.day, "fast");  // just scroll
            } else {
                app.loadEvents(args.day);  // reload and scroll
            }
        }
    });
    nav.init();


    const scheduler = new DayPilot.Scheduler("scheduler", {
        theme: "month_calender",
        visible: false, // will be displayed after loading the resources
        scale: "Manual",
        timeline: app.getTimeline(),
        timeHeaders: app.getTimeHeaders(),
        useEventBoxes: "Never",
        eventDeleteHandling: "Update",
        eventClickHandling: "Disabled",
        eventMoveHandling: "Disabled",
        eventResizeHandling: "Disabled",
        rowHeaderColumnsMode: "Legacy",

        allowEventOverlap: false,
        onBeforeTimeHeaderRender: (args) => {
            args.header.text = args.header.text.replace(" AM", "a").replace(" PM", "p");  // shorten the hour header
        },
        onBeforeEventRender: (args) => {
            if (args.e.text == null) {
                if (args.e.status == "free") {
                    args.e.bubbleHtml = "Tiêu đề: Chưa có <br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#bebebe;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Trống</span><br>";
                }
            } else {
                if (args.e.status == "waiting") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#f0ad4e;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Chờ xác nhận...</span><br>";
                }
                if (args.e.status == "confirmed") {
                    args.e.bubbleHtml = "Tiêu đề: " + args.e.text +
                        "<br>Ngày bắt đầu: " + args.e.start.toString("dd/MM/yyyy HH:mm") + "<br>Ngày kết thúc: " + args.e.end.toString("dd/MM/yyyy HH:mm") +
                        "<br>Trạng thái: <span style = 'background-color:#5cb85c;display: inline;padding: .3em .7em .4em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;' > " +
                        "Đặt thành công</span><br>";
                }
            }
            switch (args.data.status) {
                case "free":
                    args.data.backColor = "#bebebe";
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "";
                    break;
                case "waiting":
                    args.data.backColor = "#e69138";  // orange
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "";
                    break;
                case "confirmed":
                    args.data.backColor = "#6aa84f";  // green
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = "";
                    break;
            }
        },
        rowClickHandling: "Edit",
        onRowEdit: async (args) => {
            if (args.canceled) {
                return;
            }
        },
        onRowEdited: async (args) => {
            if (args.canceled) {
                return;
            }
            const params = {
                id: args.row.id,
                name: args.newText,
                //value: args.newText
            };
            const check = await DayPilot.Modal.confirm("Bạn có muốn chỉnh sửa thông tin?", { okText: "Xác nhận", cancelText: "Không" });
            if (check.result == "OK") {
                const { data: result } = await DayPilot.Http.put(`${ba}/api/Rooms/${params.id}`, params);
                scheduler.message(result.message);
                setTimeout(function () {
                    window.location.reload();
                }, 2500);

            } else {
                scheduler.message("Hủy thao tác thành công!");
            }

        },



        onEventDeleted: async (args) => {
            const params = {
                id: args.e.id(),
            };
            const check = await DayPilot.Modal.confirm("Bạn có muốn xóa?", { okText: "Xác nhận", cancelText: "không" });
            if (check.result == "OK") {

                const { data: result } = await DayPilot.Http.delete(`${ba}/api/Appointments/${params.id}`);

                scheduler.message(result.message);

            } else {
                scheduler.message("Hủy thao tác thành công!");

            }
            app.loadEvents();

        },
        onTimeRangeSelected: async (args) => {
            const dp = scheduler;
            const scale = app.elements.scaleChecked.value;

            const params = {
                start: args.start.toString(),
                end: args.end.toString(),
                resource: args.resource,
                scale: scale
            };

            dp.clearSelection();
            const check = await DayPilot.Modal.confirm("Bạn có muốn thêm mới?", { okText: "Xác nhận", cancelText: "không" });
            if (check.result == "OK") {

                const { data } = await DayPilot.Http.post(`${ba}/api/Appointments/create`, params);

                scheduler.message(data.message);

            } else {
                dp.message("Hủy thao tác thành công!");

            }
            app.loadEvents();


            //dp.message(data.message);
        }

    });
    scheduler.cellBubble = new DayPilot.Bubble({
        onLoad: function (args) {
            var cell = args.source;

            args.html = cell.start.toString("dd/MM/yyyy");
        }
    });
    scheduler.init();

    app.init();
</script>
