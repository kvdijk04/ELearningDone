// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebLearning.Persistence.ApplicationContext;

#nullable disable

namespace WebLearning.Persistence.Migrations
{
    [DbContext(typeof(WebLearningContext))]
    [Migration("20230614023247_ChangeAssetSubFromGuidToString")]
    partial class ChangeAssetSubFromGuidToString
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebLearning.Domain.Entites.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizeRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHased")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AccountDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountDetail", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AnswerCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheckBoxId")
                        .HasColumnType("int");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("OwnAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCourseId");

                    b.ToTable("AnswerCourse", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AnswerLession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheckBoxId")
                        .HasColumnType("int");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("OwnAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionLessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizLessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionLessionId");

                    b.ToTable("AnswerLession", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AnswerMonthly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheckBoxId")
                        .HasColumnType("int");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("OwnAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionMonthlyId");

                    b.ToTable("AnswerMonthly", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AppointmentSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Assests", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AssetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetSubCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AssetsCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetsDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssetsStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBuyed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateChecked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateMoved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRepaired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUsed")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpireDay")
                        .HasColumnType("int");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RepairLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Spec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetsCategoryId");

                    b.HasIndex("AssetsDepartmentId");

                    b.HasIndex("AssetsStatusId");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AssetsCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CatCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetsCategory", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AssetsDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetsDepartment", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AssetsStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetsStatus", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Avatar", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CorrectAnswerCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OptionCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionFinalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionFinalId");

                    b.ToTable("CorrectAnswerCourse", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CorrectAnswerLession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OptionLessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionLessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionLessionId");

                    b.ToTable("CorrectAnswerLession", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CorrectAnswerMonthly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OptionMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionMonthlyId");

                    b.ToTable("CorrectAnswerMonthly", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescNotify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<int>("TotalWatched")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CourseImageVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseImageVideo", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CourseRole", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumWatched")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("CourseRole", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.HistoryAddSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Editor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OldCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<bool>("SendMail")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypedSubmit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("HistoryAddSlots");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.HistorySubmitFinal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCompoleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuizCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Submit")
                        .HasColumnType("bit");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HistorySubmitFinal", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.HistorySubmitLession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCompoleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuizLessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Submit")
                        .HasColumnType("bit");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HistorySubmitLession", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.HistorySubmitMonthly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCompoleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuizMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Submit")
                        .HasColumnType("bit");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HistorySubmitMonthly", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Lession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescNotify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lession", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.LessionVideoImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescNotify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LinkVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessionId");

                    b.ToTable("LessionVideoImage", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.NotificationResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescNotify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FatherTargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TargetNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("NotificationResponse", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.OptionCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionFinalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionFinalId");

                    b.ToTable("OptionCourse", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.OptionLession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionLessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionLessionId");

                    b.ToTable("OptionLessions", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.OptionMonthly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionMonthlyId");

                    b.ToTable("OptionMonthly", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.OtherFileUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessionId");

                    b.ToTable("OtherFileUpload", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuestionFinal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<Guid>("QuizCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizCourseId");

                    b.ToTable("QuestionFinal", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuestionLession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<Guid>("QuizLessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizLessionId");

                    b.ToTable("QuestionLession", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuestionMonthly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<Guid>("QuizMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizMonthlyId");

                    b.ToTable("QuestionMonthly", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuizCourse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescNotify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HistorySubmitFinalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReportUserScoreFinalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ScorePass")
                        .HasColumnType("int");

                    b.Property<int>("TimeToDo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("HistorySubmitFinalId");

                    b.HasIndex("ReportUserScoreFinalId");

                    b.ToTable("QuizCourse", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuizLession", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescNotify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HistorySubmitLessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReportUserScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ScorePass")
                        .HasColumnType("int");

                    b.Property<int>("SortItem")
                        .HasColumnType("int");

                    b.Property<int>("TimeToDo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HistorySubmitLessionId");

                    b.HasIndex("LessionId");

                    b.HasIndex("ReportUserScoreId");

                    b.ToTable("QuizLession", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuizMonthly", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescNotify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HistorySubmitMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReportUserScoreMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ScorePass")
                        .HasColumnType("int");

                    b.Property<int>("TimeToDo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HistorySubmitMonthlyId");

                    b.HasIndex("ReportUserScoreMonthlyId");

                    b.HasIndex("RoleId");

                    b.ToTable("QuizMonthly", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.ReportUserScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuizLessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportUserScore", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.ReportUserScoreFinal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuizCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportUserScoreFinal", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.ReportUserScoreMonthly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuizMonthlyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportUserScoreMonthly", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hội trường"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lầu 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lầu 3"
                        });
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Account", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AccountDetail", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Account", "Account")
                        .WithOne("AccountDetail")
                        .HasForeignKey("WebLearning.Domain.Entites.AccountDetail", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AnswerCourse", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuestionFinal", "QuestionFinal")
                        .WithMany()
                        .HasForeignKey("QuestionCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionFinal");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AnswerLession", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuestionLession", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionLessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AnswerMonthly", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuestionMonthly", "QuestionMonthly")
                        .WithMany()
                        .HasForeignKey("QuestionMonthlyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionMonthly");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AppointmentSlot", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Assests", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.AssetsCategory", "AssetsCategory")
                        .WithMany("Assests")
                        .HasForeignKey("AssetsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLearning.Domain.Entites.AssetsDepartment", "AssetsDepartment")
                        .WithMany("Assests")
                        .HasForeignKey("AssetsDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLearning.Domain.Entites.AssetsStatus", "AssetsStatus")
                        .WithMany("Assests")
                        .HasForeignKey("AssetsStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetsCategory");

                    b.Navigation("AssetsDepartment");

                    b.Navigation("AssetsStatus");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Avatar", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Account", "Account")
                        .WithOne("Avatar")
                        .HasForeignKey("WebLearning.Domain.Entites.Avatar", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CorrectAnswerCourse", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuestionFinal", null)
                        .WithMany("CorrectAnswers")
                        .HasForeignKey("QuestionFinalId");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CorrectAnswerLession", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuestionLession", null)
                        .WithMany("CorrectAnswers")
                        .HasForeignKey("QuestionLessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CorrectAnswerMonthly", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuestionMonthly", null)
                        .WithMany("CorrectAnswers")
                        .HasForeignKey("QuestionMonthlyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CourseImageVideo", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Course", "Course")
                        .WithMany("CourseImageVideo")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.CourseRole", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Course", "Course")
                        .WithMany("CourseRoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLearning.Domain.Entites.Role", "Role")
                        .WithMany("CourseRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.HistoryAddSlot", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Lession", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Course", "Courses")
                        .WithMany("Lessions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.LessionVideoImage", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Lession", "Lession")
                        .WithMany("LessionVideoImages")
                        .HasForeignKey("LessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lession");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.OptionCourse", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuestionFinal", null)
                        .WithMany("Options")
                        .HasForeignKey("QuestionFinalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.OptionLession", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuestionLession", null)
                        .WithMany("Options")
                        .HasForeignKey("QuestionLessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.OptionMonthly", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuestionMonthly", null)
                        .WithMany("Options")
                        .HasForeignKey("QuestionMonthlyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.OtherFileUpload", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Course", null)
                        .WithMany("OtherFileUploads")
                        .HasForeignKey("CourseId");

                    b.HasOne("WebLearning.Domain.Entites.Lession", "Lession")
                        .WithMany("OtherFileUploads")
                        .HasForeignKey("LessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lession");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuestionFinal", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuizCourse", "QuizCourse")
                        .WithMany("QuestionFinals")
                        .HasForeignKey("QuizCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizCourse");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuestionLession", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuizLession", "QuizLession")
                        .WithMany("QuestionLessions")
                        .HasForeignKey("QuizLessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizLession");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuestionMonthly", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.QuizMonthly", "QuizMonthly")
                        .WithMany("QuestionMonthlies")
                        .HasForeignKey("QuizMonthlyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizMonthly");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuizCourse", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.Course", "Course")
                        .WithOne("QuizCourse")
                        .HasForeignKey("WebLearning.Domain.Entites.QuizCourse", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLearning.Domain.Entites.HistorySubmitFinal", null)
                        .WithMany("QuizCourses")
                        .HasForeignKey("HistorySubmitFinalId");

                    b.HasOne("WebLearning.Domain.Entites.ReportUserScoreFinal", null)
                        .WithMany("QuizCourses")
                        .HasForeignKey("ReportUserScoreFinalId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuizLession", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.HistorySubmitLession", null)
                        .WithMany("QuizLessions")
                        .HasForeignKey("HistorySubmitLessionId");

                    b.HasOne("WebLearning.Domain.Entites.Lession", "Lession")
                        .WithMany("Quizzes")
                        .HasForeignKey("LessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLearning.Domain.Entites.ReportUserScore", null)
                        .WithMany("QuizLessions")
                        .HasForeignKey("ReportUserScoreId");

                    b.Navigation("Lession");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuizMonthly", b =>
                {
                    b.HasOne("WebLearning.Domain.Entites.HistorySubmitMonthly", null)
                        .WithMany("QuizMonthlies")
                        .HasForeignKey("HistorySubmitMonthlyId");

                    b.HasOne("WebLearning.Domain.Entites.ReportUserScoreMonthly", null)
                        .WithMany("QuizMonthlies")
                        .HasForeignKey("ReportUserScoreMonthlyId");

                    b.HasOne("WebLearning.Domain.Entites.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Account", b =>
                {
                    b.Navigation("AccountDetail");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AssetsCategory", b =>
                {
                    b.Navigation("Assests");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AssetsDepartment", b =>
                {
                    b.Navigation("Assests");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.AssetsStatus", b =>
                {
                    b.Navigation("Assests");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Course", b =>
                {
                    b.Navigation("CourseImageVideo");

                    b.Navigation("CourseRoles");

                    b.Navigation("Lessions");

                    b.Navigation("OtherFileUploads");

                    b.Navigation("QuizCourse");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.HistorySubmitFinal", b =>
                {
                    b.Navigation("QuizCourses");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.HistorySubmitLession", b =>
                {
                    b.Navigation("QuizLessions");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.HistorySubmitMonthly", b =>
                {
                    b.Navigation("QuizMonthlies");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Lession", b =>
                {
                    b.Navigation("LessionVideoImages");

                    b.Navigation("OtherFileUploads");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuestionFinal", b =>
                {
                    b.Navigation("CorrectAnswers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuestionLession", b =>
                {
                    b.Navigation("CorrectAnswers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuestionMonthly", b =>
                {
                    b.Navigation("CorrectAnswers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuizCourse", b =>
                {
                    b.Navigation("QuestionFinals");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuizLession", b =>
                {
                    b.Navigation("QuestionLessions");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.QuizMonthly", b =>
                {
                    b.Navigation("QuestionMonthlies");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.ReportUserScore", b =>
                {
                    b.Navigation("QuizLessions");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.ReportUserScoreFinal", b =>
                {
                    b.Navigation("QuizCourses");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.ReportUserScoreMonthly", b =>
                {
                    b.Navigation("QuizMonthlies");
                });

            modelBuilder.Entity("WebLearning.Domain.Entites.Role", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("CourseRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
